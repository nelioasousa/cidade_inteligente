syntax = "proto3";


// Gateway discovery
message Address {
  string ip = 1;
  uint32 port = 2;
  string broker_ip = 3;
  uint32 broker_port = 4;
}


// Devices registration
enum DeviceType {
  DT_UNSPECIFIED = 0;
  DT_SENSOR = 1;
  DT_ACTUATOR = 2;
}

message DeviceInfo {
  DeviceType type = 1;
  string name = 2;
  string state = 3;
  string metadata = 4;
  string timestamp = 5;
}

message JoinRequest {
  DeviceInfo device_info = 1;
  Address device_address = 2;
}

message JoinReply {
  uint32 report_port = 1;
  string publish_exchange = 2;
}


// Sensors-Gateway messages
message SensorReading {
  string device_name = 1;
  float reading_value = 2;
  string metadata = 3;
  string timestamp = 4;
  bool is_online = 5;
}


// Actuators-Gateway messages
message ActuatorUpdate {
  string device_name = 1;
  string state = 2;
  string metadata = 3;
  string timestamp = 4;
  bool is_online = 5;
}

enum CommandType {
  CT_UNSPECIFIED = 0;
  CT_ACTION = 1;
  CT_GET_STATE = 2;
  CT_SET_STATE = 3;
}

message ActuatorCommand {
  CommandType type = 1;
  // empty if CommandType.CT_GET_STATE
  // OR action name if CommandType.CT_ACTION
  // OR stringfyed JSON state if CommandType.CT_SET_STATE
  string body = 2;
}

enum ComplyStatus {
  CS_UNSPECIFIED = 0;
  CS_OK = 1;
  CS_FAIL = 2;
  CS_UNKNOWN_ACTION = 3;
  CS_INVALID_STATE = 4;
}

message ActuatorComply {
  ComplyStatus status = 1;
  ActuatorUpdate update = 2;
}


// Clients-Gateway messages
message SensorData {

  message SimpleReading {
    string timestamp = 1;
    float reading_value = 2;
  }

  string device_name = 1;
  string metadata = 2;
  repeated SimpleReading readings = 3;
  bool is_online = 4;
}

message SensorsReport {
  repeated SensorReading devices = 1;
}

message ActuatorsReport {
  repeated ActuatorUpdate devices = 1;
}

enum RequestType {
  RT_UNSPECIFIED = 0;
  RT_GET_SENSORS_REPORT = 1;
  RT_GET_ACTUATORS_REPORT = 2;
  RT_GET_SENSOR_DATA = 3;
  RT_GET_ACTUATOR_UPDATE = 4;
  RT_SET_ACTUATOR_STATE = 5;
  RT_RUN_ACTUATOR_ACTION = 6;
}

message ClientRequest {
  RequestType type = 1;
  string device_name = 2;
  // empty
  // OR stringfyed JSON if RequestType.RT_SET_ACTUATOR_STATE
  // OR action name if RequestType.RT_RUN_ACTUATOR_ACTION
  string body = 3;
}

enum ReplyStatus {
  RS_UNSPECIFIED = 0;
  RS_OK = 1;
  RS_FAIL = 2;
  RS_INVALID_STATE = 3;
  RS_UNKNOWN_DEVICE = 4;
  RS_UNKNOWN_ACTION = 5;
}

message ClientReply {
  ReplyStatus status = 1;
  RequestType reply_to = 2;
  // empty
  // OR SensorsReport message if RequestType.RT_GET_SENSORS_REPORT
  // OR ActuatorsReport message if RequestType.RT_GET_ACTUATORS_REPORT
  // OR SensorData message if RequestType.RT_GET_SENSOR_DATA
  // OR ActuatorUpdate message if RequestType.RT_GET_ACTUATOR_UPDATE
  bytes data = 3;
}
